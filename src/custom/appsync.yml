# ------------------------- #
# serverless-appsync-plugin #
# ------------------------- #
# AppSyncAPIの名前
name: ${self:custom.appname}-appsync-api-${opt:stage, self:custom.defaultStage}

# スキーマファイル
schema: schema.graphql

# カスタムドメイン
# domain:
#   name: api.example.com
#   certificateArn: arn:aws:acm:us-east-1123456789:certificate/1c4e4c36-9a63-4685-94b7-e873402baca3

# キャッシュ設定（デフォルト：無効）
# caching:
#   # FULL_REQUEST_CACHING or PER_RESOLVER_CACHING
#   behavior: FULL_REQUEST_CACHING
#   ttl: 3600
#   atRestEncryption:
#   transitEncryption:
#   # キャッシュのインスタンスサイズ（デフォルト：T2_SMALL）
#   type: 'T2_SMALL'

# APIキーの設定
# apiKeys:
#   - name: john
#     description: 'My api key'
#     expiresAfter: 30d
#   - name: jane
#     description: "Jane's api key"
#     expiresAt: '2021-03-09T16:00:00+00:00'

# ログの設定
logConfig:
  loggingRoleArn: !ImportValue "${self:custom.infraStackName}-AppSyncLoggingServiceRoleArn"
  # ログレベル（ NONE | ERROR | ALL ）
  level: ALL
  # ログに詳細内容を含めるかどうか
  excludeVerboseContent: false

# 認証方式（ API_KEY | AWS_IAM | AMAZON_COGNITO_USER_POOLS | OPENID_CONNECT | AWS_LAMBDA ）
authenticationType: API_KEY
## AMAZON_COGNITO_USER_POOLSの場合
#userPoolConfig:
#  awsRegion: ${self:provider.region}
#  defaultAction: ALLOW
#  userPoolId: ap-northeast-1_XXXXXXXXX
# AWS_LAMBDAの場合
# lambdaAuthorizerConfig:
#   functionName:
#   functionAlias:
#   lambdaFunctionArn:
#   identityValidationExpression:
#   authorizerResultTtlInSeconds:
# OPENID_CONNECTの場合
# openIdConnectConfig:
#   issuer:
#   clientId:
#   iatTTL:
#   authTTL:

# 認証プロバイダーの追加設定（API_KEY | AWS_IAM | AMAZON_COGNITO_USER_POOLS | OPENID_CONNECT | AWS_LAMBDA）
# additionalAuthenticationProviders:
#   - authenticationType: API_KEY
#   - authenticationType: AWS_IAM
#   # OPENID_CONNECTの場合
#   - authenticationType: OPENID_CONNECT
#     openIdConnectConfig:
#       issuer:
#       clientId:
#       iatTTL:
#       authTTL:
#   # AMAZON_COGNITO_USER_POOLSの場合
#   - authenticationType: AMAZON_COGNITO_USER_POOLS
#     userPoolConfig:
#       awsRegion:
#       userPoolId:
#       appIdClientRegex:
#   # AWS_LAMBDAの場合
#   - authenticationType: AWS_LAMBDA
#     lambdaAuthorizerConfig:
#       functionName:
#       functionAlias:
#       lambdaFunctionArn:
#       identityValidationExpression:
#       authorizerResultTtlInSeconds:

# データソース（ NONE | AMAZON_DYNAMODB | RELATIONAL_DATABASE | AMAZON_ELASTICSEARCH | AWS_LAMBDA | HTTP ）
dataSources:
#   # NONEの場合
#   - type: NONE
#     name: none
  # DynamoDBの場合
  - type: AMAZON_DYNAMODB
    name: task_${opt:stage, self:provider.stage}
    description: タスク管理テーブル
    config:
      tableName: !ImportValue "${self:custom.infraStackName}-DynamoDBTaskTable"
      serviceRoleArn: !ImportValue "${self:custom.infraStackName}-AppSyncDynamoDBServiceRoleArn"
      versioned: false
      # バージョン管理を有効にする場合は必要
      deltaSyncConfig:
        baseTableTTL: 0
        deltaSyncTableName: { Ref: MyTableDelta }
        deltaSyncTableTTL: 60
#   # RELATIONAL_DATABASEの場合
#   - type: RELATIONAL_DATABASE
#     name:
#     description:
#     config:
#       dbClusterIdentifier: { Ref: RDSCluster }
#       awsSecretStoreArn: { Ref: RDSClusterSecret }
#       serviceRoleArn: { Fn::GetAtt: [RelationalDbServiceRole, Arn] }
#       databaseName:
#       schema:
#   #  AMAZON_ELASTICSEARCHの場合
#   - type: AMAZON_ELASTICSEARCH
#     name:
#     description: 'ElasticSearch'
#     config:
#       domain:
#       endpoint:
#       serviceRoleArn: { Fn::GetAtt: [AppSyncESServiceRole, Arn] }
#   # AWS_LAMBDAの場合
#   - type: AWS_LAMBDA
#     name:
#     description: 'Lambda DataSource'
#     config:
#       functionName: graphql
#       lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
#       serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
#   # HTTPの場合
#   - type: HTTP
#     name:
#     description: 'Http endpoint'
#     config:
#       endpoint:
#   - ${file({dataSources}.yml)}

# マッピングテンプレートファイルを格納しているディレクトリ名
mappingTemplatesLocation: resolver
mappingTemplates:
  - dataSource: task_${opt:stage, self:provider.stage}
    # スキーマの種類（ Query | Mutation | Subscription | Custom Type ）
    type: Query
    field: listTasks
    request: "Query.listTasks.request.vtl"
    response: "Query.listTasks.response.vtl"

# AppSyncの関数（パイプラインリゾルバー）
#functionConfigurations:
#  - dataSource: task_${opt:stage, self:provider.stage}
#    name: "getTask"
#    request: "getTask.request.vtl"
#    response: "getTask.response.vtl"
